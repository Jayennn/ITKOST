[
    {
        "label": "PyQt6.QtCore",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpacerItem",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSizePolicy",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFontDatabase",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "config.settings",
        "description": "config.settings",
        "isExtraImport": true,
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "components.index",
        "description": "components.index",
        "isExtraImport": true,
        "detail": "components.index",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "components.index",
        "description": "components.index",
        "isExtraImport": true,
        "detail": "components.index",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "components.index",
        "description": "components.index",
        "isExtraImport": true,
        "detail": "components.index",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "components.index",
        "description": "components.index",
        "isExtraImport": true,
        "detail": "components.index",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "components.index",
        "description": "components.index",
        "isExtraImport": true,
        "detail": "components.index",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "components.index",
        "description": "components.index",
        "isExtraImport": true,
        "detail": "components.index",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "kivy.app",
        "description": "kivy.app",
        "isExtraImport": true,
        "detail": "kivy.app",
        "documentation": {}
    },
    {
        "label": "BoxLayout",
        "importPath": "kivy.uix.boxlayout",
        "description": "kivy.uix.boxlayout",
        "isExtraImport": true,
        "detail": "kivy.uix.boxlayout",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "kivy.uix.button",
        "description": "kivy.uix.button",
        "isExtraImport": true,
        "detail": "kivy.uix.button",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "kivy.uix.label",
        "description": "kivy.uix.label",
        "isExtraImport": true,
        "detail": "kivy.uix.label",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "kivy.core.window",
        "description": "kivy.core.window",
        "isExtraImport": true,
        "detail": "kivy.core.window",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "dotenv_values",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "components.button",
        "description": "components.button",
        "isExtraImport": true,
        "detail": "components.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "components.button",
        "description": "components.button",
        "isExtraImport": true,
        "detail": "components.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "components.button",
        "description": "components.button",
        "isExtraImport": true,
        "detail": "components.button",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "config.session",
        "description": "config.session",
        "isExtraImport": true,
        "detail": "config.session",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "config.session",
        "description": "config.session",
        "isExtraImport": true,
        "detail": "config.session",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "config.session",
        "description": "config.session",
        "isExtraImport": true,
        "detail": "config.session",
        "documentation": {}
    },
    {
        "label": "Navbar",
        "importPath": "components.navbar",
        "description": "components.navbar",
        "isExtraImport": true,
        "detail": "components.navbar",
        "documentation": {}
    },
    {
        "label": "Navbar",
        "importPath": "components.navbar",
        "description": "components.navbar",
        "isExtraImport": true,
        "detail": "components.navbar",
        "documentation": {}
    },
    {
        "label": "Navbar",
        "importPath": "components.navbar",
        "description": "components.navbar",
        "isExtraImport": true,
        "detail": "components.navbar",
        "documentation": {}
    },
    {
        "label": "LoginPage",
        "importPath": "pages.login_page",
        "description": "pages.login_page",
        "isExtraImport": true,
        "detail": "pages.login_page",
        "documentation": {}
    },
    {
        "label": "LoginPage",
        "importPath": "pages.login_page",
        "description": "pages.login_page",
        "isExtraImport": true,
        "detail": "pages.login_page",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "components.label",
        "description": "components.label",
        "isExtraImport": true,
        "detail": "components.label",
        "documentation": {}
    },
    {
        "label": "SelectRole",
        "importPath": "dialog.select_role",
        "description": "dialog.select_role",
        "isExtraImport": true,
        "detail": "dialog.select_role",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "widgets.container",
        "description": "widgets.container",
        "isExtraImport": true,
        "detail": "widgets.container",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "widgets.container",
        "description": "widgets.container",
        "isExtraImport": true,
        "detail": "widgets.container",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "database.conn",
        "description": "database.conn",
        "isExtraImport": true,
        "detail": "database.conn",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "database.conn",
        "description": "database.conn",
        "isExtraImport": true,
        "detail": "database.conn",
        "documentation": {}
    },
    {
        "label": "RegisterPage",
        "importPath": "pages.register_page",
        "description": "pages.register_page",
        "isExtraImport": true,
        "detail": "pages.register_page",
        "documentation": {}
    },
    {
        "label": "RegisterPage",
        "importPath": "pages.register_page",
        "description": "pages.register_page",
        "isExtraImport": true,
        "detail": "pages.register_page",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "config.hashPassword",
        "description": "config.hashPassword",
        "isExtraImport": true,
        "detail": "config.hashPassword",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "importPath": "config.hashPassword",
        "description": "config.hashPassword",
        "isExtraImport": true,
        "detail": "config.hashPassword",
        "documentation": {}
    },
    {
        "label": "toast",
        "importPath": "win11toast",
        "description": "win11toast",
        "isExtraImport": true,
        "detail": "win11toast",
        "documentation": {}
    },
    {
        "label": "toast",
        "importPath": "win11toast",
        "description": "win11toast",
        "isExtraImport": true,
        "detail": "win11toast",
        "documentation": {}
    },
    {
        "label": "Input",
        "importPath": "components.input",
        "description": "components.input",
        "isExtraImport": true,
        "detail": "components.input",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "HomePage",
        "importPath": "pages.home_page",
        "description": "pages.home_page",
        "isExtraImport": true,
        "detail": "pages.home_page",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "src.components.button",
        "description": "src.components.button",
        "peekOfCode": "class Button(QPushButton):\n    def __init__(self, text, name=\"\", icon=None, *args, **kwargs):\n      super().__init__(*args, **kwargs)\n      # Load styles from CSS\n      with open('./src/styles/components/button.css', 'r') as file:\n          self.setStyleSheet(file.read())\n      # Set button text\n      self.setText(text)\n      # Load and apply fonts\n      FontLoader.load_fonts()",
        "detail": "src.components.button",
        "documentation": {}
    },
    {
        "label": "Input",
        "kind": 6,
        "importPath": "src.components.input",
        "description": "src.components.input",
        "peekOfCode": "class Input(QLineEdit):\n  def __init__(self, placeholder=\"\", password_mode=False, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.setPlaceholderText(placeholder)\n    FontLoader.load_fonts()\n    if password_mode:\n      self.setEchoMode(QLineEdit.EchoMode.Password)\n    self.setFont(QFont(Settings.FONT_FAMILY, 8))\n    self.setObjectName('input')\n    # self.minimumHeight(40)",
        "detail": "src.components.input",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "src.components.label",
        "description": "src.components.label",
        "peekOfCode": "class Label(QLabel):\n  def __init__(self, text, font_family=Settings.FONT_FAMILY, font_size=10, font_weights=Settings.FONT_WEIGHTS['medium'],*args, **kwargs):\n    super().__init__(text, *args, **kwargs)\n    self.setText(text)\n    FontLoader.load_fonts()\n    font = QFont(font_family, font_size, font_weights)\n    self.setFont(font)\n    self.setObjectName('label')",
        "detail": "src.components.label",
        "documentation": {}
    },
    {
        "label": "Navbar",
        "kind": 6,
        "importPath": "src.components.navbar",
        "description": "src.components.navbar",
        "peekOfCode": "class Navbar(QWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        # Load Fonts\n        FontLoader.load_fonts()\n        # Initialize UI\n        self.init_ui()\n    def init_ui(self):\n        navbar_layout = QHBoxLayout()\n        navbar_layout.setContentsMargins(20, 5, 20, 5)",
        "detail": "src.components.navbar",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "kind": 2,
        "importPath": "src.config.hashPassword",
        "description": "src.config.hashPassword",
        "peekOfCode": "def get_hashed_password(plain_text_password):\n    \"\"\"\n    Hash a password for the first time using bcrypt.\n    \"\"\"\n    return bcrypt.hashpw(plain_text_password.encode('utf-8'), bcrypt.gensalt())\ndef check_password(plain_text_password, hashed_password):\n    \"\"\"\n    Check a hashed password using bcrypt.\n    \"\"\"\n    plain_text_password_bytes = plain_text_password.encode('utf-8')",
        "detail": "src.config.hashPassword",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "src.config.hashPassword",
        "description": "src.config.hashPassword",
        "peekOfCode": "def check_password(plain_text_password, hashed_password):\n    \"\"\"\n    Check a hashed password using bcrypt.\n    \"\"\"\n    plain_text_password_bytes = plain_text_password.encode('utf-8')\n    if isinstance(hashed_password, str):\n        hashed_password = hashed_password.encode('utf-8')\n    return bcrypt.checkpw(plain_text_password_bytes, hashed_password)",
        "detail": "src.config.hashPassword",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 6,
        "importPath": "src.config.session",
        "description": "src.config.session",
        "peekOfCode": "class Session():\n  def __init__(self):\n    self.username = None\n    self.role = None\n  def clear_session(self):\n    self.username = None\n    self.role = None\n  def set_user_info(self, username, role):\n    self.username = username,\n    self.role = role",
        "detail": "src.config.session",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "src.config.settings",
        "description": "src.config.settings",
        "peekOfCode": "class Settings:\n    WINDOW_WIDTH = 800\n    WINDOW_HEIGHT = 600\n    FONT_FAMILY = \"Be Vietnam Pro\"\n    PRIMARY_COLOR = \"#1A1A1A\"\n    SECONDARY_COLOR = \"#666666\"\n    BACKGROUND_COLOR = \"#FFFFFF\"\n    FONT_WEIGHTS = {\n        \"thin\": 100,\n        \"light\": 300,",
        "detail": "src.config.settings",
        "documentation": {}
    },
    {
        "label": "FontLoader",
        "kind": 6,
        "importPath": "src.config.settings",
        "description": "src.config.settings",
        "peekOfCode": "class FontLoader:\n    @staticmethod\n    def load_fonts():\n        font_files = {\n            \"BeVietnamPro-Thin.ttf\": QFont.Weight.Thin,\n            \"BeVietnamPro-Light.ttf\": QFont.Weight.Light,\n            \"BeVietnamPro-Regular.ttf\": QFont.Weight.Normal,\n            \"BeVietnamPro-Medium.ttf\": QFont.Weight.Medium,\n            \"BeVietnamPro-SemiBold.ttf\": QFont.Weight.DemiBold,\n            \"BeVietnamPro-Bold.ttf\": QFont.Weight.Bold,",
        "detail": "src.config.settings",
        "documentation": {}
    },
    {
        "label": "MainApp",
        "kind": 6,
        "importPath": "src.database.app_frs",
        "description": "src.database.app_frs",
        "peekOfCode": "class MainApp(App):\n    def build(self):\n        Window.clear\n        blayout = BoxLayout()\n        blayout.orientation=\"vertical\"\n        label_judul = Label(text=\"Fast Respon Solution\")\n        button_darurat = Button(text=\"Darurat\")\n        button_darurat.size_hint=(0.5, 0.7)\n        button_darurat.pos_hint={\"center_x\" : 0.5}\n        button_jenis_berita = Button(text=\"Pilihan Jenis Berita\",)",
        "detail": "src.database.app_frs",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "kind": 6,
        "importPath": "src.database.conn",
        "description": "src.database.conn",
        "peekOfCode": "class DatabaseConnection():\n    def __init__(self):\n        self.db_name = os.getenv('db_name')\n        self.db_host = os.getenv('db_host')\n        self.db_user = os.getenv('db_user')\n        self.db_password = os.getenv('db_password')\n        self.db_port = os.getenv('db_port')\n        self.conn = None\n        self.cursor = None\n    def connection(self):",
        "detail": "src.database.conn",
        "documentation": {}
    },
    {
        "label": "SelectRole",
        "kind": 6,
        "importPath": "src.dialog.select_role",
        "description": "src.dialog.select_role",
        "peekOfCode": "class SelectRole(QWidget):\n  def __init__(self, home_page_instance=None, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.setObjectName('mainWindow') \n    # Get global session\n    self.session = QApplication.instance().sesi\n    # Reference to the current home page\n    self.home_page_instance = home_page_instance\n    # Load Fonts\n    FontLoader.load_fonts()",
        "detail": "src.dialog.select_role",
        "documentation": {}
    },
    {
        "label": "HomePage",
        "kind": 6,
        "importPath": "src.pages.home_page",
        "description": "src.pages.home_page",
        "peekOfCode": "class HomePage(QWidget):\n    def __init__(self, *args, **kwargs):\n      super().__init__(*args, **kwargs)\n      self.setObjectName('mainWindow') \n      # Load Fonts\n      FontLoader.load_fonts()\n      # Initialize UI\n      self.init_ui()\n    def open_select_roles_dialog(self):\n        self.select_roles_dialog = SelectRole(home_page_instance=self)",
        "detail": "src.pages.home_page",
        "documentation": {}
    },
    {
        "label": "LoginPage",
        "kind": 6,
        "importPath": "src.pages.login_page",
        "description": "src.pages.login_page",
        "peekOfCode": "class LoginPage(QWidget):\n      def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.setObjectName('mainWindow') \n            #Set Session\n            self.session = Session()\n            print(self.session.get_user_info())\n            # Load Fonts\n            FontLoader.load_fonts()\n            # Initialize UI",
        "detail": "src.pages.login_page",
        "documentation": {}
    },
    {
        "label": "RegisterPage",
        "kind": 6,
        "importPath": "src.pages.register_page",
        "description": "src.pages.register_page",
        "peekOfCode": "class RegisterPage(QWidget):\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.setObjectName('mainWindow')\n    # Load Fonts\n    FontLoader.load_fonts()\n    # Initialize UI\n    self.init_ui()\n    self.conn = DatabaseConnection()\n    self.conn.connection()",
        "detail": "src.pages.register_page",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "src.widgets.container",
        "description": "src.widgets.container",
        "peekOfCode": "class Container(QWidget): \n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.container = QWidget()\n    self.container.setObjectName('container')\n    self.container_layout = QVBoxLayout()\n    self.container.setLayout(self.container_layout)\n    self.container.setFixedWidth(350)",
        "detail": "src.widgets.container",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "class App(QApplication):\n  def __init__(self, argv):\n        super().__init__(argv)\n        self.session = Session()\n        self.init_app()\n  def init_app(self):\n      # Load fonts\n      FontLoader.load_fonts()\nif __name__ == '__main__':\n    app = App(sys.argv)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "testing",
        "kind": 2,
        "importPath": "src.test",
        "description": "src.test",
        "peekOfCode": "def testing(): \n  return",
        "detail": "src.test",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(f'Path \"{location}\" does not exist!')\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to\n    setup the environment correctly.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created  # type: ignore[used-before-def]\n    # 3.10 stopped supporting bdist_wininst, but we can still build them with 3.9.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to PythonXX\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created  # type: ignore[used-before-def]\n    # 3.10 stopped supporting bdist_wininst, but we can still build them with 3.9.\n    # This can be kept until Python 3.9 or exe installers support is dropped.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    }
]